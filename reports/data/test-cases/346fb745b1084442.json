{"uid":"346fb745b1084442","name":"编辑标签测试用例","fullName":"testcases.user_manager.test_weixin.TestApi#test_edit_flag","historyId":"d6cbe32017727c4b577e8c0b5aeda64d","time":{"start":1668505741440,"stop":1668505741553,"duration":113},"status":"failed","statusMessage":"AssertionError: requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\n  File \"D:\\Python_project\\ms-jiekou\\commons\\requests_util.py\", line 83, in standard_yaml_testcase\n    assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nAssertionError: None","statusTrace":"self = <commons.requests_util.RequestUtil object at 0x000001B2DCD969D0>\ncaseinfo = {'name': '编辑标签', 'request': {'headers': None, 'json': {'tag': {'id': 134, 'name': '广东人${get_random(0,9999)}}'}}, 'para...s_token': '${read_extract(access_token)}'}}, 'validate': [{'equals': {'errcode': 0}}, {'codes': {'status_code': 200}}]}\n\n    def standard_yaml_testcase(self, caseinfo):\n        try:\n            caseinfo_keys = caseinfo.keys()\n            # 在Yaml用例里必须有一级关键字name,request,validate\n            if \"name\" in caseinfo_keys and \"request\" in caseinfo_keys and \"validate\" in caseinfo_keys:\n                print_log(f\"----------------{caseinfo['name']}接口测试开始----------------\")\n                request_keys = caseinfo['request'].keys()\n                if 'method' in request_keys and \"url\" in request_keys and \"base_url\" in request_keys:\n                    for i, j in caseinfo['request'].items():\n                        if j is None:\n                            print_log(f\"{i}没有value,请确认\")\n                    if 'params' in caseinfo['request'].keys():\n                        for i, j in caseinfo['request']['params'].items():\n                            if j is None:\n                                print_log(f\"{i}没有value,请确认\")\n                    else:\n                        print_log(\"params参数不存在，请注意\")\n                    # 发送请求\n                    base_url = caseinfo['request'].pop('base_url')\n                    method = caseinfo['request'].pop('method')\n                    url = caseinfo['request'].pop('url')\n                    res = self.send_all_request(method, url, base_url, **caseinfo['request'])\n                    text_result = res.text  # 接收txt响应结果\n                    status_code = res.status_code\n                    js_result = ''\n                    try:\n                        js_result = res.json()  # 接收json响应结果\n                    except Exception as e:\n                        print_log('响应不是json数据格式')\n                    # 提取需要关联的值，并写入extract.yaml\n                    if 'extract' in caseinfo.keys() and caseinfo['extract'] is not None:\n                        for key, value in caseinfo['extract'].items():\n                            if '(.*?)' in value or \"(.*+)\" in value:  # 正则提取\n                                reg_value = re.search(value, text_result)\n                                if reg_value:\n                                    data = {key: reg_value.group(1)}\n                                    write_yaml(\"extract.yaml\", data)\n                                else:\n                                    print_log(\n                                        '正则表达式{}可能有误，或者(反例)接口请求失败，未提取到中间变量'.format(value))\n                            else:\n                                js_value = jsonpath.jsonpath(js_result, value)\n                                if js_value:\n                                    data = {key: js_value[0]}\n                                    write_yaml(\"extract.yaml\", data)\n                                else:\n                                    print_log(f'jsonpath表达式{value}可能有误，或者(反例)接口请求失败，未提取到中间变量')\n                    elif 'extract' in caseinfo.keys() and caseinfo['extract'] is None:\n                        print_log(\"extract配置参数为空，请检查\")\n                    # 断言：\n                    expect_result = caseinfo[\"validate\"]\n                    actual_result = js_result\n                    print_log(\"预期结果：{}\".format(expect_result))\n                    print_log(\"实际结果：{},status_code:{}\".format(actual_result, status_code))\n                    all_flag = assert_result(expect_result, actual_result, status_code)\n                    if all_flag == 0:\n                        print_log(\"{}业务断言成功\".format(caseinfo[\"name\"]))\n                    elif all_flag == -1:\n                        print_log(\"无断言参数，未执行断言\")\n                    else:\n>                       assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nE                       AssertionError: None\n\ncommons\\requests_util.py:83: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.user_manager.test_weixin.TestApi object at 0x000001B2DCD7B850>\ncaseinfo = {'name': '编辑标签', 'request': {'headers': None, 'json': {'tag': {'id': 134, 'name': '广东人${get_random(0,9999)}}'}}, 'para...s_token': '${read_extract(access_token)}'}}, 'validate': [{'equals': {'errcode': 0}}, {'codes': {'status_code': 200}}]}\n\n    @allure.title(\"编辑标签测试用例\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"caseinfo\", read_case_yaml(\"testcases/user_manager/edit_flag.yaml\"))\n    def test_edit_flag(self, caseinfo):\n>       RequestUtil(DebugTalk).standard_yaml_testcase(caseinfo)\n\ntestcases\\user_manager\\test_weixin.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\requests_util.py:90: in standard_yaml_testcase\n    error_log(\"requests_utils模块standard_yaml_testcase方法报错：%s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = 'requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\\n  File \"D:\\\\Python_project\\\\ms-jiekou\\..., in standard_yaml_testcase\\n    assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\\nAssertionError: None\\n'\n\n    def error_log(message):\n        LoggerUtils().create_log().error(message)\n>       raise AssertionError(message)\nE       AssertionError: requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\nE         File \"D:\\Python_project\\ms-jiekou\\commons\\requests_util.py\", line 83, in standard_yaml_testcase\nE           assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nE       AssertionError: None\n\ncommons\\logger_utils.py:16: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1668505740891,"stop":1668505740891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"_verify_url","time":{"start":1668505740892,"stop":1668505740892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"clear_extract","time":{"start":1668505740892,"stop":1668505740892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0},{"name":"clear_logs","time":{"start":1668505740893,"stop":1668505740893,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\n  File \"D:\\Python_project\\ms-jiekou\\commons\\requests_util.py\", line 83, in standard_yaml_testcase\n    assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nAssertionError: None","statusTrace":"self = <commons.requests_util.RequestUtil object at 0x000001B2DCD969D0>\ncaseinfo = {'name': '编辑标签', 'request': {'headers': None, 'json': {'tag': {'id': 134, 'name': '广东人${get_random(0,9999)}}'}}, 'para...s_token': '${read_extract(access_token)}'}}, 'validate': [{'equals': {'errcode': 0}}, {'codes': {'status_code': 200}}]}\n\n    def standard_yaml_testcase(self, caseinfo):\n        try:\n            caseinfo_keys = caseinfo.keys()\n            # 在Yaml用例里必须有一级关键字name,request,validate\n            if \"name\" in caseinfo_keys and \"request\" in caseinfo_keys and \"validate\" in caseinfo_keys:\n                print_log(f\"----------------{caseinfo['name']}接口测试开始----------------\")\n                request_keys = caseinfo['request'].keys()\n                if 'method' in request_keys and \"url\" in request_keys and \"base_url\" in request_keys:\n                    for i, j in caseinfo['request'].items():\n                        if j is None:\n                            print_log(f\"{i}没有value,请确认\")\n                    if 'params' in caseinfo['request'].keys():\n                        for i, j in caseinfo['request']['params'].items():\n                            if j is None:\n                                print_log(f\"{i}没有value,请确认\")\n                    else:\n                        print_log(\"params参数不存在，请注意\")\n                    # 发送请求\n                    base_url = caseinfo['request'].pop('base_url')\n                    method = caseinfo['request'].pop('method')\n                    url = caseinfo['request'].pop('url')\n                    res = self.send_all_request(method, url, base_url, **caseinfo['request'])\n                    text_result = res.text  # 接收txt响应结果\n                    status_code = res.status_code\n                    js_result = ''\n                    try:\n                        js_result = res.json()  # 接收json响应结果\n                    except Exception as e:\n                        print_log('响应不是json数据格式')\n                    # 提取需要关联的值，并写入extract.yaml\n                    if 'extract' in caseinfo.keys() and caseinfo['extract'] is not None:\n                        for key, value in caseinfo['extract'].items():\n                            if '(.*?)' in value or \"(.*+)\" in value:  # 正则提取\n                                reg_value = re.search(value, text_result)\n                                if reg_value:\n                                    data = {key: reg_value.group(1)}\n                                    write_yaml(\"extract.yaml\", data)\n                                else:\n                                    print_log(\n                                        '正则表达式{}可能有误，或者(反例)接口请求失败，未提取到中间变量'.format(value))\n                            else:\n                                js_value = jsonpath.jsonpath(js_result, value)\n                                if js_value:\n                                    data = {key: js_value[0]}\n                                    write_yaml(\"extract.yaml\", data)\n                                else:\n                                    print_log(f'jsonpath表达式{value}可能有误，或者(反例)接口请求失败，未提取到中间变量')\n                    elif 'extract' in caseinfo.keys() and caseinfo['extract'] is None:\n                        print_log(\"extract配置参数为空，请检查\")\n                    # 断言：\n                    expect_result = caseinfo[\"validate\"]\n                    actual_result = js_result\n                    print_log(\"预期结果：{}\".format(expect_result))\n                    print_log(\"实际结果：{},status_code:{}\".format(actual_result, status_code))\n                    all_flag = assert_result(expect_result, actual_result, status_code)\n                    if all_flag == 0:\n                        print_log(\"{}业务断言成功\".format(caseinfo[\"name\"]))\n                    elif all_flag == -1:\n                        print_log(\"无断言参数，未执行断言\")\n                    else:\n>                       assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nE                       AssertionError: None\n\ncommons\\requests_util.py:83: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.user_manager.test_weixin.TestApi object at 0x000001B2DCD7B850>\ncaseinfo = {'name': '编辑标签', 'request': {'headers': None, 'json': {'tag': {'id': 134, 'name': '广东人${get_random(0,9999)}}'}}, 'para...s_token': '${read_extract(access_token)}'}}, 'validate': [{'equals': {'errcode': 0}}, {'codes': {'status_code': 200}}]}\n\n    @allure.title(\"编辑标签测试用例\")\n    @pytest.mark.run(order=3)\n    @pytest.mark.smoke\n    @pytest.mark.parametrize(\"caseinfo\", read_case_yaml(\"testcases/user_manager/edit_flag.yaml\"))\n    def test_edit_flag(self, caseinfo):\n>       RequestUtil(DebugTalk).standard_yaml_testcase(caseinfo)\n\ntestcases\\user_manager\\test_weixin.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommons\\requests_util.py:90: in standard_yaml_testcase\n    error_log(\"requests_utils模块standard_yaml_testcase方法报错：%s\" % str(traceback.format_exc()))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmessage = 'requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\\n  File \"D:\\\\Python_project\\\\ms-jiekou\\..., in standard_yaml_testcase\\n    assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\\nAssertionError: None\\n'\n\n    def error_log(message):\n        LoggerUtils().create_log().error(message)\n>       raise AssertionError(message)\nE       AssertionError: requests_utils模块standard_yaml_testcase方法报错：Traceback (most recent call last):\nE         File \"D:\\Python_project\\ms-jiekou\\commons\\requests_util.py\", line 83, in standard_yaml_testcase\nE           assert 1 == 2, print_log(\"{}业务断言失败\".format(caseinfo[\"name\"]))\nE       AssertionError: None\n\ncommons\\logger_utils.py:16: AssertionError","steps":[],"attachments":[{"uid":"858fbed087eeeb77","name":"log","source":"858fbed087eeeb77.txt","type":"text/plain","size":1517}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"stepsCount":0},"afterStages":[],"labels":[{"name":"epic","value":"微信接口项目"},{"name":"tag","value":"smoke"},{"name":"tag","value":"run(order=3)"},{"name":"parentSuite","value":"testcases.user_manager"},{"name":"suite","value":"test_weixin"},{"name":"subSuite","value":"TestApi"},{"name":"host","value":"sixyco"},{"name":"thread","value":"6624-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.user_manager.test_weixin"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=3)","smoke"]},"source":"346fb745b1084442.json","parameterValues":[]}